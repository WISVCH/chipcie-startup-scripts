#!/bin/bash

# ARG_HELP([Use this script as startupscript on a GCP VM])
# ARG_OPTIONAL_SINGLE([password],[p],[Password of the judgehosts in the domserver (default: judgehost_password metadata tag)])
# ARG_OPTIONAL_SINGLE([domserver-baseurl],[u],[Baseurl of the DOMserver],[https://dj.chipcie.ch.tudelft.nl/])
# ARG_OPTIONAL_SINGLE([container],[c],[Docker container to use as judgehost],[ghcr.io/wisvch/domjudge-packaging/judgehost])
# ARG_OPTIONAL_SINGLE([version],[v],[Version of the container],[8.1.2])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


begins_with_short_option()
{
	local first_option all_short_options='hpucv'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_password=
_arg_domserver_baseurl="https://dj.chipcie.ch.tudelft.nl/"
_arg_container="ghcr.io/wisvch/domjudge-packaging/judgehost"
_arg_version="8.1.2"


print_help()
{
	printf '%s\n' "Use this script as startupscript on a GCP VM"
	printf 'Usage: %s [-h|--help] [-p|--password <arg>] [-u|--domserver-baseurl <arg>] [-c|--container <arg>] [-v|--version <arg>]\n' "$0"
	printf '\t%s\n' "-h, --help: Prints help"
	printf '\t%s\n' "-p, --password: Password of the judgehosts in the domserver (default: judgehost_password metadata tag) (no default)"
	printf '\t%s\n' "-u, --domserver-baseurl: Baseurl of the DOMserver (default: 'https://dj.chipcie.ch.tudelft.nl/')"
	printf '\t%s\n' "-c, --container: Docker container to use as judgehost (default: 'ghcr.io/wisvch/domjudge-packaging/judgehost')"
	printf '\t%s\n' "-v, --version: Version of the container (default: '8.1.2')"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			-p|--password)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_password="$2"
				shift
				;;
			--password=*)
				_arg_password="${_key##--password=}"
				;;
			-p*)
				_arg_password="${_key##-p}"
				;;
			-u|--domserver-baseurl)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_domserver_baseurl="$2"
				shift
				;;
			--domserver-baseurl=*)
				_arg_domserver_baseurl="${_key##--domserver-baseurl=}"
				;;
			-u*)
				_arg_domserver_baseurl="${_key##-u}"
				;;
			-c|--container)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_container="$2"
				shift
				;;
			--container=*)
				_arg_container="${_key##--container=}"
				;;
			-c*)
				_arg_container="${_key##-c}"
				;;
			-v|--version)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_version="$2"
				shift
				;;
			--version=*)
				_arg_version="${_key##--version=}"
				;;
			-v*)
				_arg_version="${_key##-v}"
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

#!/bin/bash

### GCP command
### wget https://raw.github.com/WISVCH/chipcie-startup-scripts/main/start-judgehost-gcp.sh -v -O start-judgehost-gcp.sh && chmod +x start-judgehost-gcp.sh && ./start-judgehost-gcp.sh password; rm -rf start-judgehost-gcp.sh

apt update
apt install -y \
		vim \
		wget \
		curl \
		git \
    ca-certificates \
    curl \
    gnupg \
    lsb-release

mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --batch --yes --dearmor -o /etc/apt/keyrings/docker.gpg
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

apt update
apt install -y \
		docker-ce \
		docker-ce-cli \
		containerd.io \
		docker-compose-plugin

if [ -z "$_arg_password" ]; then
	_arg_password=$(curl http://metadata.google.internal/computeMetadata/v1/instance/attributes/judgehost_password -H "Metadata-Flavor: Google")
fi

if ! [[ "$(cat /etc/default/grub | grep "GRUB_CMDLINE_LINUX_DEFAULT=")" =~ .*"cgroup_enable=memory".* ]]; then
	sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="[^"]*/& cgroup_enable=memory/' /etc/default/grub
fi

if ! [[ "$(cat /etc/default/grub | grep "GRUB_CMDLINE_LINUX_DEFAULT=")" =~ .*"swapaccount=1".* ]]; then
	sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="[^"]*/& swapaccount=1/' /etc/default/grub
fi

if ! [[ "$(cat /etc/default/grub | grep "GRUB_CMDLINE_LINUX_DEFAULT=")" =~ .*"systemd.unified_cgroup_hierarchy=0".* ]]; then
	sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="[^"]*/& systemd.unified_cgroup_hierarchy=0/' /etc/default/grub
fi

if ! [[ "$(cat /etc/default/grub | grep "GRUB_CMDLINE_LINUX=")" =~ .*"cgroup_enable=memory".* ]]; then
	sed -i 's/GRUB_CMDLINE_LINUX="[^"]*/& cgroup_enable=memory/' /etc/default/grub
fi

if ! [[ "$(cat /etc/default/grub | grep "GRUB_CMDLINE_LINUX=")" =~ .*"swapaccount=1".* ]]; then
	sed -i 's/GRUB_CMDLINE_LINUX="[^"]*/& swapaccount=1/' /etc/default/grub
fi

if ! [[ "$(cat /etc/default/grub | grep "GRUB_CMDLINE_LINUX=")" =~ .*"systemd.unified_cgroup_hierarchy=0".* ]]; then
	sed -i 's/GRUB_CMDLINE_LINUX="[^"]*/& systemd.unified_cgroup_hierarchy=0/' /etc/default/grub
fi

if ! ([[ "$(cat /proc/cmdline)" =~ .*"cgroup_enable=memory".* ]] && [[ "$(cat /proc/cmdline)" =~ .*"cgroup_enable=memory".* ]] && [[ "$(cat /proc/cmdline)" =~ .*"systemd.unified_cgroup_hierarchy=0".* ]]); then
	echo "restart required"
	update-grub
	reboot
fi

git clone https://github.com/WISVCH/chipcie-startup-scripts.git || (cd chipcie-startup-scripts; git pull; cd)

cd chipcie-startup-scripts

hostname="gcp-$(hostname)"
./start-judgehost.sh --hostname $hostname --domserver-baseurl $_arg_domserver_baseurl --password $_arg_password --container $_arg_container --version $_arg_version --detach 1


# ] <-- needed because of Argbash
